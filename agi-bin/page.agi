#!/usr/bin/env php
<?php
//include freepbx configuration
$restrict_mods = true;
include '/etc/freepbx.conf';
list($agi, $vars) = __agi();

$ast_ge_10 = version_compare($amp_conf['ASTVERSION'], '10', 'ge');

$get = array(
	'ALERTINFO'	=> '',
	'RINGTIMER_DEFAULT'	=> '30000',
	'AMPUSER'	=> '',
	'CALLINFO'	=> '',
	'DOPTIONS'	=> '',
	'DTIME'		=> '',
	'LEAD_WAIT'	=> 5,
	'PAGEMODE'	=> '',
	'PAGE_CONF'	=> '',
	'PAGE_CONF_OPTS'	=> '',
	'PAGE_MEMBERS'		=> '',
	'MCAST'		=> '',
	'SIPURI'	=> '',
	'STREAM'	=> 'beep',
	'ANNOUNCEMENT' => '',
	'VXML_URL'	=> '',
	'EXTRINGTIME' => '',
	'PVOL' => '',
	'SCHEDULED' => '0',
	'PAGEDEFLTANNOUCE' => '0'
);
if($astman->database_get("paging","quiet") == 1) {
	$get['STREAM'] ='';
}

foreach ($get as $k => $v) {
	$tmp = agi_get_var($k);
	$vars[$k] = $tmp ? $tmp : $v;
}
//FREEPBX-16577 Paging Pro with Auto-Answer=False does not follow Ring Time value
$defaulttimeout = $vars['RINGTIMER_DEFAULT'] * 1000;

//clear stream if requested
$vars['STREAM'] = $vars['STREAM'] == 'NONE' ? '' : $vars['STREAM'];

// TODO: this deals with the mainstream ones. We could check in the dialplan if
//there are any others outside of these and only in that case evoke the
//new custom macro that gets generated to otherwise deal with these???

//set channel variables
$base_vars['__FORWARD_CONTEXT'] = 'block-cf';
$base_vars['AMPUSER'] = __pad_string($vars['AMPUSER']);
$chan_vars = array(
	'ALERTINFO',
	'CALLINFO',
	'DOPTIONS',
	'DTIME',
	'SIPURI',
	'SIPURI',
	'VXML_URL',
	'ANNOUNCEMENT',
	'EXTRINGTIME',
	'PVOL'
);

foreach ($chan_vars as $var) {
	if ($vars[$var] != '') {
		$base_vars[$var]  = __pad_string($vars[$var]);
	}
}

// This is who we want to page.
$page_members = explode('-', $vars['PAGE_MEMBERS']);
$mcast = explode('-', $vars['MCAST']);
if (!$page_members[0] && !$mcast[0]) {
	// No members of this group?
	$agi->stream_file('error');
	exit;
}

// Figure out who we are
list($this_chan, ) = explode('-', agi_get_var("CHANNEL(name)"), 2); // SIP/123, IAX/123, DAHDI/3, etc
list( , $myext) = explode('/', $this_chan);

// Are we pjsip? We need to get our REAL URI.
if (substr($this_chan, 0, 5) == "PJSIP") {
	$caller = agi_get_var("CHANNEL(pjsip,remote_addr)");
	// Make it into a Dial()able string
	$this_chan .= "/sip:$myext@$caller";
}

/* Create a temp leader to address the issue of members being paged
 * followed by the real leader hanging up, resulting in hung paged phones
 * becasue the leader never left. Since the conference ends when the LAST
 * leader hangs up, this leader stays on just long enough to allow the real
 * leader to enter.
 * note: we got to app-page-stream since it simply enters the conference
 * as a marked user
 *Some more additional functionality needs here
 *the channel should wait unitll the ANNOUNCEMENT(alert tone played on dial A()) is made.
 *and if the page is triggered by  scheduler then this call will stay untill the all announcement is over
 *if the paging is from an extension we dont need this Page Startup to stay till the end . It should get removed after the lead wait/defaulttimetime
 */
//FREEPBX-18784 - we dont want to announce the page announcement, if the call is from parkandannounce. Based on the channel variable 'PAGEDEFLTANNOUCE'
if ($vars['PAGEDEFLTANNOUCE'] == 1) {
	$vars['STREAM'] ='';
}
 if($vars['SCHEDULED'] == 1) {
	if ($vars['ANNOUNCEMENT']!="") {
		$streamfiles = $vars['ANNOUNCEMENT'];
	}
	if ($streamfiles !="" && $vars['STREAM'] !="") {
		$streamfiles .='&'. $vars['STREAM'];
	} else {
		$streamfiles = $vars['STREAM'];
	}
	if ($amp_conf['ASTCONFAPP'] == 'app_confbridge' && $ast_ge_10) {
		$pass_vars['CONFBRIDGE(user,template)']	= 'page_user';
	}
	if($streamfiles != '') {
		$fileStatus = checkfileStatus($streamfiles);
	}
	if ($streamfiles == '' || !$fileStatus) {
		$app = 'Wait';
		$data = $vars['LEAD_WAIT'];
	}
	else {
		$app = 'Playback';
		$data = $streamfiles;
	}
	$lead = array(
		'Channel'	=> 'Local/s@app-page-stream',
		'CallerID'	=> 'Page Startup',
		'Async'		=> 'true',
		'Variable'	=> array(
			'PAGE_CONF' => __pad_string($vars['PAGE_CONF']),
			'PAGE_CONF_OPTS' => 'mxqA',
			'PAGE_USER_TYPE' => 'ADMIN_MUTED'
		),
		'Application'=> $app,
		'Data'		=> $data
	);
 } else {
	 $lead = array(
		'Channel'	=> 'Local/s@app-page-stream',
		'CallerID'	=> 'Page Startup',
		'Async'		=> 'true',
		'Variable'	=> array(
			'PAGE_CONF' => __pad_string($vars['PAGE_CONF']),
			'PAGE_CONF_OPTS' => 'mxqA'
		),
		'Application'=> 'Wait',
		'Data'		=> $vars['LEAD_WAIT']
	);
 }
$astman->Originate($lead);

// Grab all Asterisk 12-and-above PJSIP Registrations,
// as we may need them later.
$pjsips = $astman->database_show('registrar/contact');
$pjsipcontacts = array();
foreach ($pjsips as $contact => $entry) {
        $item = json_decode($entry, true);
        if ($item === false) {
                // Not PJsip, or, incorrect phpagi version
                continue;
        }
        // I found a PJSIP device. Which aor is it linked to?
        // /registrar/contact/301;@sip:301@10.46.80.100:5060
        list($prefix, ) = explode(';', $contact); // /registrar/contact/301
        $tmparr = explode('/', $prefix); // array('registrar', 'contact', '301')
        $dev = array_pop($tmparr); // 301
	// Add it to our array, for later.
        $pjsipcontacts[$dev][] = $item;
}

// Now, loop through everyone we're meant to call, and get their
// destination.
$devices = array();
foreach ($page_members as $pm) {
	$device = $agi->database_get("DEVICE", $pm . '/dial');
	$device = $device['data'];
	// If this is NOT a PJSIP device, then just add it and continue on..
	if (substr($device, 0, 5) != "PJSIP") {
		// Make sure we don't call ourselves..
		if ($this_chan != $device) {
			$devices[] = array($device, false, $pm);
		}
		continue;
	}
	// It's a PJSIP Device.
	if (isset($pjsipcontacts[$pm])) {
		foreach ($pjsipcontacts[$pm] as $pjdev) {
			$dev = "PJSIP/$pm/".$pjdev['uri'];
			//Contact:  800/sip:800@192.168.3.169:5060;ob
			//it can be anything empty or ;ob/;user=test so just take only  the contact for comparision
			$uri = explode(";",$pjdev['uri']);
			$devcom = "PJSIP/$pm/".$uri[0];
			// $agi->verbose("Checking '$dev' against '$this_chan'", 0);
			if ($devcom != $this_chan) {
				$devices[] = array($dev, $pjdev['user_agent'], $pm);
			}
		}
	}
}

// Finally add any multicast entries.
foreach ($mcast as $addr) {
	if(!empty($addr)) {
		$devices[] = array("MulticastRTP/basic/$addr", "rtp", "rtp");
	}
}

foreach ($devices as $dev) {
	if (!$dev[0]) { // If MCAST only..
		continue;
	}

	$pagemode = 'PAGE';
	$pass_vars = $base_vars;

	if ($amp_conf['ASTCONFAPP'] == 'app_confbridge' && $ast_ge_10) {
		$pass_vars['CONFBRIDGE(user,template)']
			= $vars['PAGE_CONF_OPTS'] == 'duplex'
			? 'page_user_duplex'
			: 'page_user';
	}

	$device = $dev[0];
	$useragent = $dev[1];
	$pm = $dev[2];

	// We may already know about the agent, without needing to
	// query asterisk later.
	if ($useragent) {
		$pass_vars['KNOWNAGENT'] = $useragent;
	}

	$pass_vars['KNOWNDIAL'] = $device;

	// if not force mode, don't page busy extension (NOT_INUSE or ONHOLD
	// are ok to page). if FPAGE we use the PAGE context reset above but
	// this will get skipped
	if ($useragent == "rtp") {
		$dev_state = "NOT_INUSE";
	} else {
		$dev_state = get_device_state($device);
	}
	// $agi->verbose("device $device has state $dev_state", 0);
	if ($vars['PAGEMODE'] == 'PAGE') {
		if ($dev_state != 'NOT_INUSE' && $dev_state != 'ONHOLD') {
			continue;
		}
		$user = $agi->database_get("DEVICE", $pm . '/user');
		$dnd = $user['data'] != ''
			?  $agi->database_get("DND", $user['data'])
			: array('data' => '');
		if ($dnd['data'] == 'YES') {
			continue;
		}
		// try using Spy mode (whisper)
	} elseif ($vars['PAGEMODE'] == 'SPAGE') {
		// if not idle but in a state we can try spying, then try
		if ($dev_state != 'NOT_INUSE' && $dev_state != 'ONHOLD') {
			//TODO: change to in_array or a function
			$user = $agi->database_get("DEVICE", $pm . '/user');
			$dnd = $user['data'] != ''
				?  $agi->database_get("DND", $user['data'])
				: array('data' => '');
			if ($dnd['data'] == 'YES') {
				continue;
			}
			$type = explode('/', $device);
			if (strtolower($type[0]) != 'sip' && strtolower($type[0]) != 'pjsip') {
				continue;
			}
			if(strtolower($type[0]) == 'pjsip'){
				$device = $type[0]."/".$type[1];
			}
			switch ($dev_state) {
			case "INUSE":
			case "BUSY":
			case "RINGINUSE":
			case "HOLDINUSE":
				// Try SPY
				$pagemode = 'SPAGE';
				$pass_vars['SP_DEVICE'] = __pad_string($device);
				break;
			default:
				// State is not amicable to spy or normal
				// (such as RINGING) so skip it
				continue;
				break;
			}
		}
	}

	if ($amp_conf['ASTCONFAPP'] == 'app_confbridge' && $ast_ge_10) {
		$data_params = $vars['PAGE_CONF'] . ',,,' . 'user_menu';
	} else {
		$data_params = $vars['PAGE_CONF']
			. ','
			. $vars['PAGE_CONF_OPTS']
			. ',,';
	}
	$astman->Originate(array(
		'Channel'	=> 'Local/' . $pagemode . $pm . '@app-paging/n',
		'CallerID'	=> $vars['calleridname'].' <'.$vars['callerid'].'>',
		'Timeout'	=> $defaulttimeout,
		'Async'		=> 'true',
		'Codecs'	=> 'ulaw',
		'Variable'	=> $pass_vars,
		'Application'	=> ($amp_conf['ASTCONFAPP'] == 'app_confbridge' ? 'ConfBridge' : 'MeetMe'),
		'Data'		=> $data_params
	));
}

if ($vars['STREAM']) {
	if ($vars['ANNOUNCEMENT']!="") {
		$stream_files = $vars['ANNOUNCEMENT'];
	}
	if ($stream_files !="" && $vars['STREAM'] !="") {
		$stream_files .='&'. $vars['STREAM'];
	} else {
	       $stream_files = $vars['STREAM'];
	}

	$beep = array(
		'Channel'	=> 'Local/s@app-page-stream',
		'CallerID'	=> 'Playback Stream',
		'Async'		=> 'true',
		'Variable'	=> array(
			'PAGE_CONF' => __pad_string($vars['PAGE_CONF']),
			'PAGE_CONF_OPTS' => 'xqA'
		),
		'Application'=> 'Playback',
		'Data'		=> $stream_files
	);
	//dbug($beep);
	$astman->Originate($beep);
}

function __agi(){
	global $amp_conf;
	include_once $amp_conf['ASTAGIDIR'].'/phpagi.php';
	$agi=new AGI();
	foreach($agi->request as $key => $value){//strip agi_ prefix from keys
		if(substr($key,0,4)=='agi_'){
			$opts[substr($key,4)]=$value;
		}
	}

	foreach($opts as $key => $value){//get passed in vars
		if(substr($key,0,4)=='arg_'){
			$expld=explode('=',$value);
			$opts[$expld[0]]=$expld[1];
			unset($opts[$key]);
		}
	}

	array_shift($_SERVER['argv']);
	foreach($_SERVER['argv'] as $arg){
		$arg=explode('=',$arg);
		//remove leading '--'
		if(substr($arg['0'],0,2) == '--'){$arg['0']=substr($arg['0'],2);}
		$opts[$arg['0']]=isset($arg['1'])?$arg['1']:null;
	}

	return array($agi, $opts);
}

function agi_get_var($value) {
	global $agi;
	$r = $agi->get_variable($value);

	if ($r['result'] == 1) {
		$result = $r['data'];
		return $result;
	}
	return '';
}

function __pad_string($string) {
	return str_replace(
		array('\\', ',', '='),
		array('\\\\', '\\,', '\\='),
		$string
	);
}

function get_device_state($dev) {
	// FREEPBX-11929 - If this is a DAHDI device, assume
	// that people know what they're doing, and if it returns
	// UNKNOWN, map that to 'NOT_INUSE'
	if (substr($dev, 0, 5) == "DAHDI") {
		$state = agi_get_var("DEVICE_STATE($dev)");
		if ($state == "UNKNOWN") {
			return "NOT_INUSE";
		} else {
			return $state;
		}
	}

	// If it's not a PJSIP device, just return our normal device state
	if (substr($dev, 0, 5) != "PJSIP") {
		return agi_get_var("DEVICE_STATE($dev)");
	}

	global $astman, $agi;
	// There's no way to get the state of an individual PJSIP device at the moment,
	// but we can see, sorta, if it's in use. Sub-optimal, yes.
	//
	// If they're running a derpy version of astman...
	if (!method_exists($astman, "PJSIPShowEndpoint")) {
		return "ERROR";
	}
	// We only want the actual device ID
	list( , $id, ) = explode('/', $dev);
	// $agi->verbose("Looking for $id state", 0);
	$cmd = $astman->PJSIPShowEndpoint($id);
	$devstate = array();
	foreach($cmd as $a){
		if($a['ObjectName'] == $id){
			$devstate[$id]['DeviceState'] = $a['DeviceState'];
		}
	}

	if (!isset($devstate[$id]['DeviceState'])) {
		return "UNKNOWN";
	}
	$state = $devstate[$id]['DeviceState'];
	switch ($state) {
	case "Not in use":
		return "NOT_INUSE";
	case "In use":
		return "INUSE";
	case "Busy":
		return "BUSY";
	default:
		return "UNAVAILABLE";
	}
}
function checkfileStatus($files = false) {
	$status = false;
	$astvarlibdir = agi_get_var("ASTVARLIBDIR")."/sounds/";
	$chanLang = agi_get_var("CHANNEL(language)");
	$multiFile = strpos($files, "&");
	if($multiFile) {
		$file_data = explode('&', $files);
		foreach($file_data as $file) {
			$result = glob($astvarlibdir.$chanLang.'/'.$file.".*");
			if(!empty($result)) {
				$status = true;
				break;
			}
		}
	}
	else {
		$result = glob($astvarlibdir.$chanLang.'/'.$files.".*");
		if(!empty($result)) {
			$status = true;
		}
	}
	return $status;
}
